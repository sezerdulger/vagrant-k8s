# -*- mode: ruby -*-
# vi: set ft=ruby :
require 'json'
file = File.read('blueprint.json')
vm_data = JSON.parse(file)

vm_data.each do |key, value|
  p key
  p value
end

Vagrant.configure("2") do |config|
  config.vm.box = "ubuntu/focal64"

	vm_data["master"].each do |node|
		name=node["name"]
		ip=node["ip"]
	  config.vm.define "#{name}" do |node|
		node.vm.hostname = "#{name}"
		node.vm.provision "shell", inline: "echo hello from k8s master node #{name}"
		node.vm.provision "shell", inline: "echo #{name} > /etc/hostname"
		node.vm.provision "shell", inline: "hostnamectl set-hostname #{name}"
		node.vm.provision "shell", inline: "sed -i s/'PasswordAuthentication no'/'PasswordAuthentication yes'/g /etc/ssh/sshd_config"
		node.vm.provision "shell", inline: "service ssh restart"
		node.vm.provision "shell", inline: "echo 'vagrant ALL=(ALL) NOPASSWD: ALL' >> /etc/sudoers"
		#node.vm.provision "shell", path: "install.sh", :args => [ "#{name}", "#{ip}" ]
		node.vm.network "private_network", ip: "#{ip}"
		node.vm.boot_timeout = 600000
		node.vm.provider :virtualbox do |vb|
			vb.memory = 2048
			vb.cpus = 1
			vb.customize ["modifyvm", :id, "--vram", "128", "--paravirtprovider", "minimal"]
		end
	  end
	end
	
	
	vm_data["ceph"].each do |node|
		name=node["name"]
		ip=node["ip"]
	  config.vm.define "#{name}" do |node|
		node.vm.hostname = "#{name}"
		node.vm.provision "shell", inline: "echo hello from k8s ceph node #{name}"
		node.vm.provision "shell", inline: "echo #{name} > /etc/hostname"
		node.vm.provision "shell", inline: "hostnamectl set-hostname #{name}"
		node.vm.provision "shell", inline: "sed -i s/'PasswordAuthentication no'/'PasswordAuthentication yes'/g /etc/ssh/sshd_config"
		node.vm.provision "shell", inline: "service ssh restart"
		node.vm.provision "shell", inline: "echo 'vagrant ALL=(ALL) NOPASSWD: ALL' >> /etc/sudoers"
		#node.vm.provision "shell", path: "install.sh", :args => [ "#{name}", "#{ip}" ]
		node.vm.network "private_network", ip: "#{ip}"
		node.vm.boot_timeout = 600000
		node.vm.provider :virtualbox do |vb|
			vb.memory = 2048
			vb.cpus = 1
			vb.customize ["modifyvm", :id, "--vram", "128", "--paravirtprovider", "minimal"]
		end
	  end
	end
	
	vm_data["lb"].each do |node|
		name=node["name"]
		ip=node["ip"]
		config.vm.define "#{name}" do |node|
			node.vm.provision "shell", inline: "echo hello from k8s-master-lb"
			node.vm.provision "shell", inline: "echo 'k8s-master-lb' > /etc/hostname"
			node.vm.hostname = "k8s-master-lb"
			node.vm.provision "shell", inline: "hostnamectl set-hostname k8s-master-lb"
			node.vm.provision "shell", inline: "sed -i s/'PasswordAuthentication no'/'PasswordAuthentication yes'/g /etc/ssh/sshd_config"	
			node.vm.provision "shell", inline: "service ssh restart"
			#node.vm.provision "shell", inline: "echo 'vagrant ALL=(ALL) NOPASSWD: ALL' >> /etc/sudoers"
			#node.vm.provision "shell", inline: "apt-get update && apt-get install expect -y"
			#node.vm.provision "shell", inline: "curl -sLS https://get.k3sup.dev | sh"
			#node.vm.provision "shell", inline: "if [ ! -f '/root/.ssh/id_rsa' ]; then ssh-keygen -t rsa -N '' -f /root/.ssh/id_rsa; fi"
			
			
			node.vm.provision "shell", path: "k8s-master-lb/install.sh"
			
			#firstmaster=vm_data["master"].shift
			#initip=firstmaster["ip"]
			#node.vm.provision "shell", inline: "echo master init ip: #{initip}"
			#node.vm.provision "shell", path: "k8s-master-lb/sshcopyid.sh", :args => [ "#{initip}" ]
			#node.vm.provision "shell", path: "k8s-master-lb/cluster-master-init.sh", :args => [ "#{initip}" ]
			
			#vm_data["master"].each do |n|
			#	nip=n["ip"]
			#	node.vm.provision "shell", path: "k8s-master-lb/sshcopyid.sh", :args => [ "#{nip}" ]
			#	node.vm.provision "shell", path: "k8s-master-lb/cluster-master-join.sh", :args => [ "#{nip}", "#{initip}" ]
			#end
			#vm_data["ceph"].each do |n|
			#	nip=n["ip"]
			#	node.vm.provision "shell", path: "k8s-master-lb/sshcopyid.sh", :args => [ "#{nip}" ]
			#	node.vm.provision "shell", path: "k8s-master-lb/cluster-worker-join.sh", :args => [ "#{nip}", "#{initip}" ]
			#end

			#node.vm.provision "shell", path: "k8s-master-lb/install.sh"
			node.vm.network "private_network", ip: "#{ip}"
			node.vm.boot_timeout = 600000
			node.vm.provider :virtualbox do |vb|
				vb.memory = 2048
				vb.cpus = 1
				vb.customize ["modifyvm", :id, "--vram", "128", "--paravirtprovider", "minimal"]
			end
		end
	end
	
end
